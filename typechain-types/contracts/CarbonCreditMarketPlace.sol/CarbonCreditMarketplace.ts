/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace CarbonCreditMarketplace {
  export type MarketItemStruct = { tokenId: BigNumberish; price: BigNumberish };

  export type MarketItemStructOutput = [tokenId: bigint, price: bigint] & {
    tokenId: bigint;
    price: bigint;
  };
}

export interface CarbonCreditMarketplaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyCredit"
      | "carbonCreditContract"
      | "creditsForSale"
      | "getAllListingsSortedByPrice"
      | "listCreditForSale"
      | "marketplaceBalance"
      | "onERC721Received"
      | "owner"
      | "withdrawFunds"
      | "xrplToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CreditListed" | "CreditSold"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyCredit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "carbonCreditContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditsForSale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllListingsSortedByPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listCreditForSale",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketplaceBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "xrplToken", values?: undefined): string;

  decodeFunctionResult(functionFragment: "buyCredit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "carbonCreditContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creditsForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllListingsSortedByPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listCreditForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketplaceBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xrplToken", data: BytesLike): Result;
}

export namespace CreditListedEvent {
  export type InputTuple = [tokenId: BigNumberish, price: BigNumberish];
  export type OutputTuple = [tokenId: bigint, price: bigint];
  export interface OutputObject {
    tokenId: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CreditSoldEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    buyer: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [tokenId: bigint, buyer: string, price: bigint];
  export interface OutputObject {
    tokenId: bigint;
    buyer: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CarbonCreditMarketplace extends BaseContract {
  connect(runner?: ContractRunner | null): CarbonCreditMarketplace;
  waitForDeployment(): Promise<this>;

  interface: CarbonCreditMarketplaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyCredit: TypedContractMethod<
    [tokenId: BigNumberish, offerPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  carbonCreditContract: TypedContractMethod<[], [string], "view">;

  creditsForSale: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getAllListingsSortedByPrice: TypedContractMethod<
    [],
    [CarbonCreditMarketplace.MarketItemStructOutput[]],
    "view"
  >;

  listCreditForSale: TypedContractMethod<
    [tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  marketplaceBalance: TypedContractMethod<[], [bigint], "view">;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  withdrawFunds: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  xrplToken: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyCredit"
  ): TypedContractMethod<
    [tokenId: BigNumberish, offerPrice: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "carbonCreditContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "creditsForSale"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAllListingsSortedByPrice"
  ): TypedContractMethod<
    [],
    [CarbonCreditMarketplace.MarketItemStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "listCreditForSale"
  ): TypedContractMethod<
    [tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "marketplaceBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "xrplToken"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "CreditListed"
  ): TypedContractEvent<
    CreditListedEvent.InputTuple,
    CreditListedEvent.OutputTuple,
    CreditListedEvent.OutputObject
  >;
  getEvent(
    key: "CreditSold"
  ): TypedContractEvent<
    CreditSoldEvent.InputTuple,
    CreditSoldEvent.OutputTuple,
    CreditSoldEvent.OutputObject
  >;

  filters: {
    "CreditListed(uint256,uint256)": TypedContractEvent<
      CreditListedEvent.InputTuple,
      CreditListedEvent.OutputTuple,
      CreditListedEvent.OutputObject
    >;
    CreditListed: TypedContractEvent<
      CreditListedEvent.InputTuple,
      CreditListedEvent.OutputTuple,
      CreditListedEvent.OutputObject
    >;

    "CreditSold(uint256,address,uint256)": TypedContractEvent<
      CreditSoldEvent.InputTuple,
      CreditSoldEvent.OutputTuple,
      CreditSoldEvent.OutputObject
    >;
    CreditSold: TypedContractEvent<
      CreditSoldEvent.InputTuple,
      CreditSoldEvent.OutputTuple,
      CreditSoldEvent.OutputObject
    >;
  };
}
